openapi: 3.0.3
info:
  title: GNIV - OpenAPI 3.0
  description: |-
    APIs for GNIV Power App
  contact:
    email: artiwarahd@gmail.com
  version: 0.0.1
servers:
  - url: http://139.59.125.193/api/v1
tags:
  - name: category
    description: All About Categories
  - name: product
    description: All About Products
  # - name: product_variation
  #   description: All About Product Variations
  - name: order
    description: CRUD Orders
  - name: promotion
    description: All About Promotions
paths:
  /categories:
    get:
      tags:
        - category
      summary: List Categories
      description: returns all categories
      operationId: listCategory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          description: Invalid tag value
      security:
        - api_key:
            - read:categories
  /products:
    get:
      tags:
        - product
      summary: List Products
      description: returns all products
      operationId: listProduct
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid tag value
      security:
        - api_key:
            - read:products
  /products/search:
    get:
      tags:
        - product
      summary: Search Products
      description: Search products by specific fields with values
      operationId: searchProducts
      parameters:
        - name: name
          in: query
          description: Search products by name
          required: false
          schema:
            type: string
        - name: price
          in: query
          description: Search products by price
          required: false
          schema:
            type: string
        - name: category_id
          in: query
          description: Search products by category_id
          required: false
          schema:
            type: integer
            format: int64
        - name: color
          in: query
          description: Search products by color
          required: false
          schema:
            type: string
        - name: size
          in: query
          description: Search products by size
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
      security:
        - api_key:
            - write:products
            - read:products
  # /product:
    # post:
    #   tags:
    #     - product
    #   summary: Add a new product to the store
    #   description: Add a new product to the store
    #   operationId: addProduct
    #   requestBody:
    #     description: Create a new product in the store
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Product'
    #       application/x-www-form-urlencoded:
    #         schema:
    #           $ref: '#/components/schemas/Product'
    #     required: true
    #   responses:
    #     '200':
    #       description: Successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Product'
    #     '405':
    #       description: Invalid input
    #   security:
    #     - api_key:
    #         - write:products
    #         - read:products
  /product/{productId}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
      security:
        - api_key: []
        - api_key:
            - write:products
            - read:products
    # put:
    #   tags:
    #     - product
    #   summary: Update an existing product
    #   description: Update an existing product by Id
    #   operationId: updateProduct
    #   requestBody:
    #     description: Update an existent product in the store
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Product'
    #       application/x-www-form-urlencoded:
    #         schema:
    #           $ref: '#/components/schemas/Product'
    #     required: true
    #   responses:
    #     '200':
    #       description: Successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Product'
    #     '400':
    #       description: Invalid ID supplied
    #     '404':
    #       description: Product not found
    #     '405':
    #       description: Validation exception
    #   security:
    #     - api_key:
    #         - write:products
    #         - read:products
    # delete:
    #   tags:
    #     - product
    #   summary: Deletes a product
    #   description: delete a product
    #   operationId: deleteProduct
    #   parameters:
    #     - name: api_key
    #       in: header
    #       description: ''
    #       required: false
    #       schema:
    #         type: string
    #     - name: productId
    #       in: path
    #       description: Product id to delete
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #   responses:
    #     '400':
    #       description: Invalid product value
    #   security:
    #     - api_key:
    #         - write:products
    #         - read:products
  /orders:
    get:
      tags:
        - order
      summary: List Order
      description: returns all orders
      operationId: listOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '400':
          description: Invalid tag value
      security:
        - api_key:
            - read:orders
  /order:
    post:
      tags:
        - order
      summary: Open a new order
      description: Open a new order, ready to add sold product info
      operationId: addOrder
      requestBody:
        description: Open a new order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderParams'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderParams'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      security:
        - api_key:
            - write:orders
            - read:orders
  /order/{orderId}:
    get:
      tags:
        - order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: []
        - api_key:
            - write:orders
            - read:orders
    put:
      tags:
        - order
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderParams'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderParams'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderParams'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '405':
          description: Validation exception
      security:
        - api_key:
            - write:orders
            - read:orders
  /order/{id}/upload_bill_photo:
    post:
      tags:
        - order
      summary: Upload bill photo
      description: ''
      operationId: uploadBillPhoto
      parameters:
        - in: path
          name: id
          description: ID of order to update
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: order
          description: order attributes in hash format
          required: true
          schema:
            type: object
            properties:
              bill_photo:
                type: string
                format: binary
                example: BLOB
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - api_key:
            - write:orders
            - read:orders
  /order/{id}/add_items/{orderItemId}:
    post:
      tags:
        - order
      summary: Add an order item to the order
      description: ''
      operationId: addItemOrder
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: order
          description: order attributes in hash format
          required: true
          schema:
            type: object
            properties:
              order_items:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItemParams'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      security:
        - api_key:
            - write:orders
            - read:orders
  /order/{id}/delete_item/{orderItemId}:
    delete:
      tags:
        - order
      summary: Delete item from the order
      description: ''
      operationId: deleteItemOrder
      parameters:
        - name: id
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
            format: int64
        - name: orderItemId
          in: path
          description: ID of item to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - api_key:
            - write:orders
            - read:orders
  /order/{orderId}/submit:
    post:
      tags:
        - order
      summary: Submit the order
      description: ''
      operationId: submitOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to submit
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      security:
        - api_key:
            - write:orders
            - read:orders
  /order/{orderId}/cancel_order:
    post:
      tags:
        - order
      summary: Cancel the order
      description: ''
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to cancel
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      security:
        - api_key:
            - write:orders
            - read:orders
  /promotions:
    get:
      tags:
        - promotion
      summary: List Promotions
      description: returns all promotions
      operationId: listPromotion
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotion'
        '400':
          description: Invalid tag value
      security:
        - api_key:
            - read:promotions
components:
  schemas:
    User:
      required:
        - username
        - password
        - firstname
        - lastname
        - telephone
        - lineid
        - contract_type
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: admin
        password:
          type: string
          example: asdqwe123!
        firstname:
          type: string
          example: Admin
        lastname:
          type: string
          example: VING
        address:
          type: string
          example: 123 Abc Def Ghi, JKL 10000
        telephone:
          type: string
          example: 0900000000
        lineid:
          type: string
          example: ving
        profile_image:
          type: string
          format: binary
          example: BLOB
        roles:
          type: array
          enum:
            - admin
            - staff
            - sale
        birthdate:
          type: string
          format: date
          example: 2000-01-31
        accessible_branches:
          type: array
          example: [a, b, c]
        current_branch:
          type: string
          example: a
        daily_rate:
          type: number
          format: float
          example: 500.00
        ot_rate:
          type: number
          format: float
          example: 100.00
        contract_type:
          type: string
          enum:
            - fulltime
            - parttime
      xml:
        name: user
    Role:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: admin
      xml:
        name: role
    Branch:
      required:
        - group
        - name
        - code
        - floor
        - location
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        group:
          type: string
          example: ROBINSON
        name:
          type: string
          example: TALANG
        code:
          type: string
          example: 1
        floor:
          type: string
          example: 1
        location:
          type: string
          example: ใกล้บันไดเลื่อนข้าง adidas
        managername:
          type: string
          example: ประสิท
        managerphone:
          type: string
          example: 0987654321
        managerline:
          type: string
          example: abcd
        size:
          type: string
          example: 10x10
        gps_coordinate:
          type: string
          example: 12.3456, 78.9012
        default_promotion:
          type: integer
          format: int64
          description: a foreign key to promotion table
          example: 1
      xml:
        name: branch
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: category
        attributes:
          type: object
          properties:
            name:
              type: string
              example: รองเท้าแตะ
            image:
              type: object
              properties:
                url:
                  type: string
                  example: http://gniv.co.th/assets/a.jpg
            created_at:
              type: string
              format: date-time
              example: 2023-10-10 18:36:33.739155 +0700
            updated_at:
              type: string
              format: date-time
              example: 2023-10-10 18:36:33.739155 +0700
        relationships:
          type: object
          properties:
            products:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProductRef'
      xml:
        name: category
    CategoryRef:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: "category"
      xml:
        name: category_ref
    Product:
      required:
        - category_id
        - name
        - image
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: product
        attributes:
          type: object
          properties:
            name:
              type: string
              example: Vari
            image:
              type: string
              format: binary
              example: BLOB
            price:
              type: string
              example: 1200
            barcode:
              type: string
              example: 10100100101
        relationships:
          type: object
          properties:
            category:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/CategoryRef'
            product_variations:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/ProductVariationRef'
      xml:
        name: product
    ProductRef:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: "product"
      xml:
        name: product_ref
    ProductVariation:
      required:
        - product_id
        - color
        - size
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: product_variation
        attributes:
          type: object
          properties:
            color:
              type: string
              example: red
            size:
              type: string
              example: 10.5
            image:
              type: string
              format: binary
              example: BLOB
            barcode:
              type: string
              example: 10100100101
            product:
              $ref: '#/components/schemas/Product'
      xml:
        name: product_variation
    ProductVariationRef:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: "product_variation"
      xml:
        name: product_variation_ref
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: order
        attributes:
          type: object
          properties:
            total:
              type: integer
              format: int64
              example: 2400
            net_total:
              type: integer
              format: int64
              example: 2400
            customer_type:
              type: string
              enum:
                - ลูกค้าทั่วไป
                - สมาชิก
            customer_age:
              type: string
              enum:
                - 2-9
                - 10-18
                - 19-35
                - 36-60
                - 60+
            # user:
            #   $ref: '#/components/schemas/User'
            # branch:
            #   $ref: '#/components/schemas/Branch'
            # attendance:
            #   $ref: '#/components/schemas/Attendance'
            created_at:
              type: string
              format: date-time
              example: 2023-10-10 18:36:33.739155 +0700
            updated_at:
              type: string
              format: date-time
              example: 2023-10-10 18:36:33.739155 +0700
            extra_promotion_type:
              type: string
            extra_promotion_discount:
              type: string
              example: 10
            bill_photo:
              type: string
              format: binary
              example: BLOB
            note:
              type: string
              example: ส่วนลดพิเศษสำหรับลูกค้า 10 คนแรก
            status:
              type: string
              enum:
                - draft
                - paid
                - cancelled
        relationships:
          type: object
          properties:
            products:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderItemRef'
      xml:
        name: order
    OrderParams:
      type: object
      properties:
        note: 
          type: string
          example: Test add note
        customer_type: 
          type: string
          example: Offline
        customer_age: 
          type: string
          example: 35-60
        extra_promotion_type: 
          type: string
          example: buy 2 get more 5%
        extra_promotion_discount: 
          type: string
          example: 5
        status: 
          type: string
          enum:
            - draft
            - paid
            - cancelled
          example: paid
        bill_photo: 
          type: string
          format: binary
          example: BLOB
      xml:
        name: order_params
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: order_item
        attributes:
          type: object
          properties:
            product_variation:
              $ref: '#/components/schemas/ProductVariation'
            promotion:
              $ref: '#/components/schemas/Promotion'
            order:
              $ref: '#/components/schemas/Order'
            promotion_snapshot:
              type: string
              format: hash
            price:
              type: integer
              format: int64
              example: 1200
            discount_percent:
              type: integer
              format: int64
              example: 10
            net_price:
              type: integer
              format: int64
              example: 1200
            created_at:
              type: string
              format: date-time
              example: 2023-10-10 18:36:33.739155 +0700
            product_variation_snapshot:
              type: string
              format: hash
      xml:
        name: order_item
    OrderItemRef:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: "order_item"
      xml:
        name: order_item_ref
    OrderItemParams:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        order_id:
          type: integer
          format: int64
          example: 1
        product_variation_id:
          type: integer
          format: int64
          example: 1
        promotion_id:
          type: integer
          format: int64
          example: 1
      xml:
        name: order_item_params
    Promotion:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          example: promotion
        attributes:
          type: object
          properties:
            name:
              type: string
              example: Mother's Day
            discount_percent:
              type: integer
              enum:
                - 10
                - 20
                - 30
                - 40
                - 50
            sequence:
              type: integer
              example: 1
      xml:
        name: category
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
  requestBodies:
    Product:
      description: Product object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header